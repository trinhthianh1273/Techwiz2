// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Api.Models;

public partial class SoccerContext : DbContext
{
    public SoccerContext(DbContextOptions<SoccerContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Cart> Cart { get; set; }

    public virtual DbSet<Category> Category { get; set; }

    public virtual DbSet<Competition> Competition { get; set; }

    public virtual DbSet<Customer> Customer { get; set; }

    public virtual DbSet<Employee> Employee { get; set; }

    public virtual DbSet<Feedback> Feedback { get; set; }

    public virtual DbSet<Match> Match { get; set; }

    public virtual DbSet<OrderContent> OrderContent { get; set; }

    public virtual DbSet<Orders> Orders { get; set; }

    public virtual DbSet<PaymentMethod> PaymentMethod { get; set; }

    public virtual DbSet<Player> Player { get; set; }

    public virtual DbSet<PlayerImage> PlayerImage { get; set; }

    public virtual DbSet<ProductImage> ProductImage { get; set; }

    public virtual DbSet<Products> Products { get; set; }

    public virtual DbSet<Status> Status { get; set; }

    public virtual DbSet<Team> Team { get; set; }

    public virtual DbSet<TeamImage> TeamImage { get; set; }

    public virtual DbSet<TeamPlayerHistory> TeamPlayerHistory { get; set; }

    public virtual DbSet<address> address { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Cart>(entity =>
        {
            entity.HasKey(e => e.CartID).HasName("PK__CartCont__8821D0E09D7FE47A");

            entity.HasOne(d => d.Customer).WithMany(p => p.Cart)
                .HasForeignKey(d => d.CustomerID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Cart_Customer");

            entity.HasOne(d => d.Product).WithMany(p => p.Cart)
                .HasForeignKey(d => d.ProductID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CartContent_Products");
        });

        modelBuilder.Entity<Category>(entity =>
        {
            entity.Property(e => e.CategoryID).ValueGeneratedNever();
            entity.Property(e => e.CategoryDescription)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.CategoryName)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<Competition>(entity =>
        {
            entity.Property(e => e.CompetitionName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasKey(e => e.CustomerID).HasName("PK__Customer__A4AE64B851B8C632");

            entity.HasIndex(e => e.Username, "UQ__Customer__536C85E4282B50A6").IsUnique();

            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Fullname)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Password)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Employee>(entity =>
        {
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Role).HasMaxLength(50);
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Feedback>(entity =>
        {
            entity.HasKey(e => e.FeedbackID).HasName("PK__Feedback__6A4BEDF68AD69E48");

            entity.Property(e => e.Content).HasMaxLength(500);
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(100);

            entity.HasOne(d => d.Customer).WithMany(p => p.Feedback)
                .HasForeignKey(d => d.CustomerID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Feedback_Customer");
        });

        modelBuilder.Entity<Match>(entity =>
        {
            entity.Property(e => e.EndTime).HasColumnType("datetime");
            entity.Property(e => e.MatchName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Stadium).HasMaxLength(50);
            entity.Property(e => e.StartTime).HasColumnType("datetime");

            entity.HasOne(d => d.Competition).WithMany(p => p.Match)
                .HasForeignKey(d => d.CompetitionID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Match_Competition");

            entity.HasOne(d => d.GuestTeam).WithMany(p => p.MatchGuestTeam)
                .HasForeignKey(d => d.GuestTeamID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Match_Team1");

            entity.HasOne(d => d.HomeTeam).WithMany(p => p.MatchHomeTeam)
                .HasForeignKey(d => d.HomeTeamID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Match_Team");
        });

        modelBuilder.Entity<OrderContent>(entity =>
        {
            entity.HasKey(e => e.OrderContentID).HasName("PK__OrderCon__63F96EFBCCF86802");

            entity.HasOne(d => d.Order).WithMany(p => p.OrderContent)
                .HasForeignKey(d => d.OrderID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderContent_Orders");

            entity.HasOne(d => d.Product).WithMany(p => p.OrderContent)
                .HasForeignKey(d => d.ProductID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderContent_Products");
        });

        modelBuilder.Entity<Orders>(entity =>
        {
            entity.HasKey(e => e.OrderID).HasName("PK__Orders__C3905BAFD40F2FBD");

            entity.Property(e => e.CardName).HasMaxLength(50);
            entity.Property(e => e.CardNumber).HasMaxLength(50);
            entity.Property(e => e.Expire).HasMaxLength(50);
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.ShippedDate).HasColumnType("datetime");

            entity.HasOne(d => d.Address).WithMany(p => p.Orders)
                .HasForeignKey(d => d.AddressID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Orders_address");

            entity.HasOne(d => d.Customer).WithMany(p => p.Orders)
                .HasForeignKey(d => d.CustomerID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Orders_Customer");

            entity.HasOne(d => d.Employee).WithMany(p => p.Orders)
                .HasForeignKey(d => d.EmployeeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Orders_Employee");

            entity.HasOne(d => d.PaymentMethod).WithMany(p => p.Orders)
                .HasForeignKey(d => d.PaymentMethodID)
                .HasConstraintName("FK_Orders_PaymentMethod");

            entity.HasOne(d => d.Status).WithMany(p => p.Orders)
                .HasForeignKey(d => d.StatusID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Orders_Status");
        });

        modelBuilder.Entity<PaymentMethod>(entity =>
        {
            entity.Property(e => e.PaymentMethod1)
                .HasMaxLength(50)
                .HasColumnName("PaymentMethod");
        });

        modelBuilder.Entity<Player>(entity =>
        {
            entity.Property(e => e.Dob).HasColumnType("date");
            entity.Property(e => e.FullName).IsRequired();
            entity.Property(e => e.Pob).IsRequired();
            entity.Property(e => e.Position).IsRequired();

            entity.HasOne(d => d.CurrentTeamNavigation).WithMany(p => p.Player)
                .HasForeignKey(d => d.CurrentTeam)
                .HasConstraintName("FK_Player_Team");
        });

        modelBuilder.Entity<PlayerImage>(entity =>
        {
            entity.Property(e => e.ImageURL)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Player).WithMany(p => p.PlayerImage)
                .HasForeignKey(d => d.PlayerID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PlayerImage_Player");
        });

        modelBuilder.Entity<ProductImage>(entity =>
        {
            entity.Property(e => e.ImageURL)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Product).WithMany(p => p.ProductImage)
                .HasForeignKey(d => d.ProductID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductImage_Products");
        });

        modelBuilder.Entity<Products>(entity =>
        {
            entity.HasKey(e => e.ProductID);

            entity.Property(e => e.ProductID).ValueGeneratedNever();
            entity.Property(e => e.ProductName).HasMaxLength(50);

            entity.HasOne(d => d.Category).WithMany(p => p.Products)
                .HasForeignKey(d => d.CategoryID)
                .HasConstraintName("FK_Products_Category");

            entity.HasOne(d => d.Player).WithMany(p => p.Products)
                .HasForeignKey(d => d.PlayerID)
                .HasConstraintName("FK_Products_Player");

            entity.HasOne(d => d.Team).WithMany(p => p.Products)
                .HasForeignKey(d => d.TeamID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Products_Team");
        });

        modelBuilder.Entity<Status>(entity =>
        {
            entity.HasKey(e => e.StatusID).HasName("PK__Status__C8EE2043127B677E");

            entity.Property(e => e.StatusName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Team>(entity =>
        {
            entity.Property(e => e.FoundedPosition)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.FoundedYear)
                .IsRequired()
                .HasMaxLength(4);
            entity.Property(e => e.FullName).IsRequired();
            entity.Property(e => e.Manager).HasMaxLength(50);
            entity.Property(e => e.Nickname)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Owner).HasMaxLength(50);
            entity.Property(e => e.ShortName).IsRequired();
            entity.Property(e => e.Website).HasMaxLength(50);
        });

        modelBuilder.Entity<TeamImage>(entity =>
        {
            entity.Property(e => e.ImageURL)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Team).WithMany(p => p.TeamImage)
                .HasForeignKey(d => d.TeamID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TeamImage_Team");
        });

        modelBuilder.Entity<TeamPlayerHistory>(entity =>
        {
            entity.Property(e => e.JoinDate).HasColumnType("date");
            entity.Property(e => e.LeaveDate).HasColumnType("date");

            entity.HasOne(d => d.Player).WithMany(p => p.TeamPlayerHistory)
                .HasForeignKey(d => d.PlayerID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TeamPlayerHistory_Player");

            entity.HasOne(d => d.Team).WithMany(p => p.TeamPlayerHistory)
                .HasForeignKey(d => d.TeamID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TeamPlayerHistory_Team");
        });

        modelBuilder.Entity<address>(entity =>
        {
            entity.HasKey(e => e.AddressID).HasName("PK__address__091C2A1B19AD29A0");

            entity.Property(e => e.Address1)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("Address");
            entity.Property(e => e.PhoneNumber)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.ReceiverName)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.HasOne(d => d.Customer).WithMany(p => p.address)
                .HasForeignKey(d => d.CustomerID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_address_Customer");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}